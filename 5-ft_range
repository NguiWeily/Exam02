Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_range(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at start and end at end (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 1, 2 and 3.
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing 0, -1, -2 and -3.

Certainly! Here's an implementation of the `ft_range` function in C:

```c
#include <stdlib.h>

int* ft_range(int start, int end) {
    int size = end - start + 1;
    int* range = (int*)malloc(size * sizeof(int));
    if (range == NULL) {
        return NULL; // Failed to allocate memory
    }

    for (int i = 0; i < size; i++) {
        range[i] = start + i;
    }

    return range;
}
```

Save the above code in a file named `ft_range.c`. The `ft_range` function takes two integers, `start` and `end`, and returns a pointer to an array of integers. The array is filled with consecutive values starting from `start` and ending at `end`, including both `start` and `end`.

Here's an example usage of the `ft_range` function:

```c
#include <stdio.h>

int main() {
    int start = 1;
    int end = 3;
    int* range = ft_range(start, end);

    if (range != NULL) {
        int size = end - start + 1;
        for (int i = 0; i < size; i++) {
            printf("%d ", range[i]);
        }
        printf("\n");

        free(range); // Remember to free the allocated memory
    }

    return 0;
}
```

You can compile the code using a C compiler, and the output will be the array of integers generated by the `ft_range` function. Make sure to free the allocated memory using `free` when you're done using the array to avoid memory leaks.
