Assignment name  : last_word

Expected files   : last_word.c

Allowed functions: write

--------------------------------------------------------------------------------

Write a program that takes a string and displays its last word followed by a \n.

A word is a section of string delimited by spaces/tabs or by the start/end of

the string.

If the number of parameters is not 1, or there are no words, display a newline.

Example:

$> ./last_word "FOR PONY" | cat -e

PONY$

$> ./last_word "this        ...       is sparta, then again, maybe    not" | cat -e

not$

$> ./last_word "   " | cat -e

$

$> ./last_word "a" "b" | cat -e

$

$> ./last_word "  lorem,ipsum  " | cat -e

lorem,ipsum$

$>

Certainly! Here's an example implementation of the "last_word" program in C:

```c
#include <unistd.h>

void last_word(char *str) {
    int i = 0;
    int last_word_start = -1;
    int last_word_end = -1;

    // Find the start and end indices of the last word
    while (str[i]) {
        if (str[i] != ' ' && str[i] != '\t') {
            if (last_word_end == -1)
                last_word_start = i;
            last_word_end = i;
        } else if (last_word_end != -1) {
            last_word_start = -1;
            last_word_end = -1;
        }
        i++;
    }

    // Output the last word if found
    if (last_word_start != -1) {
        for (int j = last_word_start; j <= last_word_end; j++) {
            write(1, &str[j], 1);
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc == 2) {
        last_word(argv[1]);
    }
    write(1, "\n", 1);
    return 0;
}
```

In this implementation, the `last_word` function takes a string `str` as an argument. It iterates through each character in the string to find the start and end indices of the last word. The start index is set when a non-space/non-tab character is encountered after a space/tab or at the beginning of the string. The end index is updated as long as non-space/non-tab characters are encountered consecutively. If a space/tab is encountered after a word has started (indicated by `last_word_end != -1`), the start and end indices are reset.

After finding the indices of the last word, the function uses the `write` function to output the characters of the last word to the standard output.

The `main` function checks if the program was called with one argument (`argc == 2`), and if so, it calls the `last_word` function with the provided argument. After the last word is displayed, a newline character is written to the standard output.

You can compile the program using a C compiler, such as GCC, with the command:

```
gcc -o last_word last_word.c
```

Then you can run the program with different input strings, like the examples given in the assignment prompt:

```
./last_word "FOR PONY"
./last_word "this        ...       is sparta, then again, maybe    not"
./last_word "   "
./last_word "a" "b"
./last_word "  lorem,ipsum  "
```

The program will output the last word of the input string, followed by a newline. If the number of parameters is not 1 or there are no words, it will output a newline.
