Assignment name  : first_word
Expected files   : first_word.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays its first word, followed by a
newline.

A word is a section of string delimited by spaces/tabs or by the start/end of
the string.

If the number of parameters is not 1, or if there are no words, simply display
a newline.

Examples:

$> ./first_word "FOR PONY" | cat -e
FOR$
$> ./first_word "this        ...       is sparta, then again, maybe    not" | cat -e
this$
$> ./first_word "   " | cat -e
$
$> ./first_word "a" "b" | cat -e
$
$> ./first_word "  lorem,ipsum  " | cat -e
lorem,ipsum$
$>

Certainly! Here's an implementation of the `first_word` program in C:

```c
#include <unistd.h>

int is_delimiter(char c) {
    return (c == ' ' || c == '\t');
}

void first_word(char *str) {
    int i = 0;

    // Skip leading delimiters
    while (is_delimiter(str[i])) {
        i++;
    }

    // Print the first word
    while (str[i] != '\0' && !is_delimiter(str[i])) {
        write(1, &str[i], 1);
        i++;
    }

    // Print a newline character
    write(1, "\n", 1);
}

int main(int argc, char **argv) {
    if (argc == 2) {
        first_word(argv[1]);
    } else {
        // Print a newline if number of parameters is not 1
        write(1, "\n", 1);
    }
    return 0;
}
```

In this implementation, the `first_word` function takes a string `str` as input and prints the first word of the string, followed by a newline character. The `is_delimiter` function is used to check if a character is a delimiter (space or tab).

The `first_word` function starts by skipping any leading delimiter characters in the string. It then iterates through the string until it encounters either a delimiter character or the null terminator. During this iteration, it writes each character to the standard output using the `write` function.

After printing the first word, the function prints a newline character using `write` to ensure a new line is displayed.

The `main` function checks if the number of command-line parameters is 2 (the program name and the input string). If it is, it calls the `first_word` function with the input string. If the number of parameters is not 2, it simply prints a newline character.

You can compile and run the program to test it with the provided examples.
