Assignment name  : rot_13
Expected files   : rot_13.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays it, replacing each of its
letters by the letter 13 spaces ahead in alphabetical order.

'z' becomes 'm' and 'Z' becomes 'M'. Case remains unaffected.

The output will be followed by a newline.

If the number of arguments is not 1, the program displays a newline.

Example:

$>./rot_13 "abc"
nop
$>./rot_13 "My horse is Amazing." | cat -e
Zl ubefr vf Nznmvat.$
$>./rot_13 "AkjhZ zLKIJz , 23y " | cat -e
NxwuM mYXVWm , 23l $
$>./rot_13 | cat -e
$
$>
$>./rot_13 "" | cat -e
$
$>

Below is an implementation of the `rot_13` program in C:

```c
#include <unistd.h>

void rot_13(char *str)
{
    int i = 0;
    while (str[i] != '\0')
    {
        if ((str[i] >= 'a' && str[i] <= 'm') || (str[i] >= 'A' && str[i] <= 'M'))
            str[i] += 13;
        else if ((str[i] >= 'n' && str[i] <= 'z') || (str[i] >= 'N' && str[i] <= 'Z'))
            str[i] -= 13;
        write(1, &str[i], 1);
        i++;
    }
}

int main(int argc, char *argv[])
{
    if (argc == 2)
    {
        rot_13(argv[1]);
    }
    write(1, "\n", 1);
    return 0;
}
```

In this implementation, the `rot_13` function takes a string `str` as input and applies the ROT13 cipher to it. The `rot_13` function traverses each character in the string and performs the following transformations:

- If the character is between 'a' and 'm' (or 'A' and 'M'), it adds 13 to the character to get the corresponding character 13 positions ahead in alphabetical order.
- If the character is between 'n' and 'z' (or 'N' and 'Z'), it subtracts 13 from the character to get the corresponding character 13 positions back in alphabetical order.

The transformed characters are then written to the standard output using the `write` function.

In the `main` function, we check if the number of arguments is 2 (indicating a single string argument). If it is, we pass the string argument to the `rot_13` function. After the transformation, we write a newline character to the standard output.

You can compile and run this program to apply the ROT13 cipher to a given string.
