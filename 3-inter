Assignment name  : inter
Expected files   : inter.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes two strings and displays, without doubles, the
characters that appear in both strings, in the order they appear in the first
one.

The display will be followed by a \n.

If the number of arguments is not 2, the program displays \n.

Examples:

$>./inter "padinton" "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
padinto$
$>./inter ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
df6ewg4$
$>./inter "rien" "cette phrase ne cache rien" | cat -e
rien$
$>./inter | cat -e
$

Certainly! Here's an example implementation of the "inter" program in C:

```c
#include <unistd.h>

void inter(char *str1, char *str2) {
    int characters[256] = {0};

    while (*str2) {
        characters[(int)*str2] = 1;
        str2++;
    }

    while (*str1) {
        if (characters[(int)*str1] == 1) {
            characters[(int)*str1] = 2;
            write(1, str1, 1);
        }
        str1++;
    }
}

int main(int argc, char *argv[]) {
    if (argc == 3) {
        inter(argv[1], argv[2]);
    }
    write(1, "\n", 1);
    return 0;
}
```

In this implementation, the `inter` function takes two strings `str1` and `str2` as arguments. It uses an array `characters` of size 256 (to cover all possible ASCII characters) to keep track of the characters that appear in `str2`. Initially, all elements of `characters` are set to 0.

In the first loop, `str2` is iterated to mark the characters that appear in `str2` by setting the corresponding index in the `characters` array to 1.

In the second loop, `str1` is iterated, and if a character in `str1` appears in `str2` (indicated by `characters[(int)*str1] == 1`), it is written to the standard output using the `write` function. The corresponding index in the `characters` array is then set to 2 to avoid displaying duplicates.

The `main` function checks if the program was called with two arguments (`argc == 3`), and if so, it calls the `inter` function with the provided arguments. After the characters are displayed, a newline character is written to the standard output.

You can compile the program using a C compiler, such as GCC, with the command:

```
gcc -o inter inter.c
```

Then you can run the program with different input strings, like the examples given in the assignment prompt:

```
./inter "padinton" "paqefwtdjetyiytjneytjoeyjnejeyj"
./inter ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd
./inter "rien" "cette phrase ne cache rien"
./inter
```

The program will output the characters that appear in both strings, without duplicates, in the order they appear in the first string. If the number of arguments is not 2, it will output a newline.
